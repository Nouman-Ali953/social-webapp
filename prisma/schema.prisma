// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id
  username             String          @unique
  avatar               String?
  cover                String?
  name                 String?
  surname              String?
  description          String?
  city                 String?
  school               String?
  work                 String?
  website              String?
  createdAt            DateTime        @default(now())
  posts                Post[]
  likes                Like[]
  comments             Comments[]
  followers            Follower[]      @relation("UserFollowers")
  followings           Follower[]      @relation("UserFollowings")
  FollowRequestSend    FollowRequest[] @relation("FollowRequestSend")
  FollowRequestRecieve FollowRequest[] @relation("FollowRequestRecieve")
  BlocksSend           Block[]  @relation("BlocksSend")
  BlocksRecieve        Block[]  @relation("BlocksRecieve")
  story                Story[]
}

model Post {
  id        Int        @id @default(autoincrement())
  img       String?
  desc      String     @db.Text
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
  comments  Comments[]
}

model Comments {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  likes     Like[]
}

model Like {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  post       Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int?
  comments   Comments? @relation(fields: [commentsId], references: [id], onDelete: Cascade)
  commentsId Int?
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  followers   User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  followings  User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  sender     User     @relation("FollowRequestSend", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  reciever   User     @relation("FollowRequestRecieve", fields: [recieverId], references: [id], onDelete: Cascade)
  recieverId String

  @@unique([senderId, recieverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker   User     @relation("BlocksSend", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("BlocksRecieve", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockedId, blockerId])
}

model Story {
  id        Int      @id @default(autoincrement())
  img       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
}
